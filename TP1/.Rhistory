title="Projection des individus : en fonction des peintre")
# calculate acp16nn
out_acp16nn <- PCA(painting8,scale.unit=FALSE,ncp=7,quali.sup=8,graph=FALSE)
# draw the Eboulis
val_prop <- out_acp16nn$eig[,"eigenvalue"]
val_prop_cum <- cumsum(val_prop)/sum(val_prop)
cp <- 1:length(val_prop)
vp <- data.frame(cp=cp,val_prop=val_prop)
vp_cum <- data.frame(cp=cp,val_prop_cum=val_prop_cum)
ggplot(data=vp,aes(x=cp,y=val_prop))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Eboulis des valeurs propres")+
xlab("Nombre de composantes principales")+
ylab("Valeurs propres")+
scale_x_continuous(breaks=cp)
# draw the Projections des individus en fonction des peintre
plot.PCA(out_acp16nn,shadow=TRUE,cex=2,axes=c(1,2),choix="ind",habillage=8,label="none",new.plot=TRUE,
title="Projection des individus : en fonction des peintre")
# calculate acp16nn
out_acp16nn <- PCA(painting16,scale.unit=FALSE,ncp=63,quali.sup=64,graph=FALSE)
# draw the Eboulis
val_prop <- out_acp16nn$eig[,"eigenvalue"]
val_prop_cum <- cumsum(val_prop)/sum(val_prop)
cp <- 1:length(val_prop)
vp <- data.frame(cp=cp,val_prop=val_prop)
vp_cum <- data.frame(cp=cp,val_prop_cum=val_prop_cum)
ggplot(data=vp,aes(x=cp,y=val_prop))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Eboulis des valeurs propres")+
xlab("Nombre de composantes principales")+
ylab("Valeurs propres")+
scale_x_continuous(breaks=cp)
# draw the Projections des individus en fonction des peintre
plot.PCA(out_acp16nn,shadow=TRUE,cex=2,axes=c(1,2),choix="ind",habillage=64,label="none",new.plot=TRUE,
title="Projection des individus : en fonction des peintre")
# calculate acp16nn
out_acp16nn <- PCA(painting16,scale.unit=FALSE,ncp=63,quali.sup=64,graph=FALSE)
# draw the Eboulis
val_prop <- out_acp16nn$eig[,"eigenvalue"]
val_prop_cum <- cumsum(val_prop)/sum(val_prop)
cp <- 1:length(val_prop)
vp <- data.frame(cp=cp,val_prop=val_prop)
vp_cum <- data.frame(cp=cp,val_prop_cum=val_prop_cum)
ggplot(data=vp,aes(x=cp,y=val_prop))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Eboulis des valeurs propres")+
xlab("Nombre de composantes principales")+
ylab("Valeurs propres")+
scale_x_continuous(breaks=cp)
View(out_acp16nn)
View(out_acp8n)
View(out_acp8nn)
View(out_acp16nn)
View(out_acp16nn)
View(out_acp8n)
View(out_acp8nn)
View(out_acp8n)
View(out_acp16nn)
# calculate the covariance of p64
c <- cor(painting64[,1:63])
corrplot(c, method = "number", col = "black", cl.pos = "n")
# calculate acp16nn
out_acp16nn <- PCA(painting16,scale.unit=FALSE,ncp=63,quali.sup=64,graph=FALSE)
# draw the Eboulis
val_prop <- out_acp16nn$eig[,"eigenvalue"]
val_prop_cum <- cumsum(val_prop)/sum(val_prop)
cp <- 1:length(val_prop)
vp <- data.frame(cp=cp,val_prop=val_prop)
vp_cum <- data.frame(cp=cp,val_prop_cum=val_prop_cum)
ggplot(data=vp,aes(x=cp,y=val_prop))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Eboulis des valeurs propres")+
xlab("Nombre de composantes principales")+
ylab("Valeurs propres")+
scale_x_continuous(breaks=cp)
# draw the Projections des individus en fonction des peintre
plot.PCA(out_acp16nn,shadow=TRUE,cex=2,axes=c(1,2),choix="ind",habillage=64,label="none",new.plot=TRUE,
title="Projection des individus : en fonction des peintre")
# calculate the variance of p64
v <- var(painting64[,1:63])
# draw the Boîtes à moustaches of p64
boxplot(painting64[,1:63],main="Boîtes à moustaches")
# draw the Nuages des points of p64
plot(painting64[,1:63],main="Nuages des points")
# calculate the covariance of p64
c <- cor(painting64[,1:63])
corrplot(c, method = "number", col = "black", cl.pos = "n")
# calculate acp16nn
out_acp16nn <- PCA(painting16,scale.unit=FALSE,ncp=63,quali.sup=64,graph=FALSE)
# draw the Eboulis
val_prop <- out_acp16nn$eig[,"eigenvalue"]
val_prop_cum <- cumsum(val_prop)/sum(val_prop)
cp <- 1:length(val_prop)
vp <- data.frame(cp=cp,val_prop=val_prop)
vp_cum <- data.frame(cp=cp,val_prop_cum=val_prop_cum)
ggplot(data=vp,aes(x=cp,y=val_prop))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Eboulis des valeurs propres")+
xlab("Nombre de composantes principales")+
ylab("Valeurs propres")+
scale_x_continuous(breaks=cp)
# calculate acp16nn
out_acp16nn <- PCA(painting16,scale.unit=FALSE,ncp=63,quali.sup=64,graph=FALSE)
setwd("F:\\R\\TP1\\")
painting64 <- read.table("painting64.txt",sep=";",dec=".")
painting64$peintre <- as.factor(c(rep("R",40),rep("VG",44)))
# calculate acp16nn
out_acp16nn <- PCA(painting16,scale.unit=FALSE,ncp=63,quali.sup=64,graph=FALSE)
# draw the Eboulis
val_prop <- out_acp16nn$eig[,"eigenvalue"]
val_prop_cum <- cumsum(val_prop)/sum(val_prop)
cp <- 1:length(val_prop)
vp <- data.frame(cp=cp,val_prop=val_prop)
vp_cum <- data.frame(cp=cp,val_prop_cum=val_prop_cum)
ggplot(data=vp,aes(x=cp,y=val_prop))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Eboulis des valeurs propres")+
xlab("Nombre de composantes principales")+
ylab("Valeurs propres")+
scale_x_continuous(breaks=cp)
# draw the Projections des individus en fonction des peintre
plot.PCA(out_acp16nn,shadow=TRUE,cex=2,axes=c(1,2),choix="ind",habillage=64,label="none",new.plot=TRUE,
title="Projection des individus : en fonction des peintre")
# calculate acp16nn
out_acp16nn <- PCA(painting16,scale.unit=FALSE,ncp=63,quali.sup=64,graph=FALSE)
# calculate acp64nn
out_acp64nn <- PCA(painting64,scale.unit=FALSE,ncp=63,quali.sup=64,graph=FALSE)
# draw the Eboulis
val_prop <- out_acp64nn$eig[,"eigenvalue"]
val_prop_cum <- cumsum(val_prop)/sum(val_prop)
cp <- 1:length(val_prop)
vp <- data.frame(cp=cp,val_prop=val_prop)
vp_cum <- data.frame(cp=cp,val_prop_cum=val_prop_cum)
ggplot(data=vp,aes(x=cp,y=val_prop))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Eboulis des valeurs propres")+
xlab("Nombre de composantes principales")+
ylab("Valeurs propres")+
scale_x_continuous(breaks=cp)
# draw the Projections des individus en fonction des peintre
plot.PCA(out_acp64nn,shadow=TRUE,cex=2,axes=c(1,2),choix="ind",habillage=64,label="none",new.plot=TRUE,
title="Projection des individus : en fonction des peintre")
View(out_acp8n)
library(ggplot2)
library(FactoMineR)
library(corrplot)
setwd("F:\\R\\TP1\\")
# read the data
painting8 <- read.table("painting8.txt",sep=";",dec=".")
# repeat R 40 times, repeat VG 44 times and combine them
painting8$peintre <- as.factor(c(rep("R",40),rep("VG",44)))
painting64 <- read.table("painting64.txt",sep=";",dec=".")
painting64$peintre <- as.factor(c(rep("R",40),rep("VG",44)))
# calculate the variance of p8
v <- var(painting8[,1:7])
# draw the Boîtes à moustaches of p8
boxplot(painting8[,1:7],main="Boîtes à moustaches")
# draw the Nuages des points of p8
plot(painting8[,1:7],main="Nuages des points")
# calculate the covariance of p8
c <- cor(painting8[,1:7])
corrplot(c, method = "number", col = "black", cl.pos = "n")
# calculate acp8n
out_acp8n <- PCA(painting8,scale.unit=TRUE,ncp=7,quali.sup=8,graph=FALSE)
# draw the Eboulis
val_prop <- out_acp8n$eig[,"eigenvalue"]
val_prop_cum <- cumsum(val_prop)/sum(val_prop)
cp <- 1:length(val_prop)
vp <- data.frame(cp=cp,val_prop=val_prop)
vp_cum <- data.frame(cp=cp,val_prop_cum=val_prop_cum)
ggplot(data=vp,aes(x=cp,y=val_prop))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Eboulis des valeurs propres")+
xlab("Nombre de composantes principales")+
ylab("Valeurs propres")+
scale_x_continuous(breaks=cp)
ggplot(data=vp_cum,aes(x=cp,y=val_prop_cum))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Part d'inertie expliquée en fonction du nombre de CP")+
xlab("Nombre de composantes principales")+
ylab("Part d'inertie expliquée")+
scale_x_continuous(breaks=cp)
# draw the Cercle des corrélations
plot.PCA(out_acp8n,shadow=TRUE,cex=0.8,axes=c(1,2),choix="var",new.plot=TRUE,
title="Cercle des corrélations")
# draw the Projections des individus en fonction des peintre
plot.PCA(out_acp8n,shadow=TRUE,cex=2,axes=c(1,2),choix="ind",habillage=8,label="none",new.plot=TRUE,
title="Projection des individus : en fonction des peintre")
# calculate acp8nn
out_acp8nn <- PCA(painting8,scale.unit=FALSE,ncp=7,quali.sup=8,graph=FALSE)
# draw the Eboulis
val_prop <- out_acp8nn$eig[,"eigenvalue"]
val_prop_cum <- cumsum(val_prop)/sum(val_prop)
cp <- 1:length(val_prop)
vp <- data.frame(cp=cp,val_prop=val_prop)
vp_cum <- data.frame(cp=cp,val_prop_cum=val_prop_cum)
ggplot(data=vp,aes(x=cp,y=val_prop))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Eboulis des valeurs propres")+
xlab("Nombre de composantes principales")+
ylab("Valeurs propres")+
scale_x_continuous(breaks=cp)
ggplot(data=vp_cum,aes(x=cp,y=val_prop_cum))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Part d'inertie expliquée en fonction du nombre de CP")+
xlab("Nombre de composantes principales")+
ylab("Part d'inertie expliquée")+
scale_x_continuous(breaks=cp)
# draw the Projections des individus en fonction des peintre
plot.PCA(out_acp8nn,shadow=TRUE,cex=2,axes=c(1,2),choix="ind",habillage=8,label="none",new.plot=TRUE,
title="Projection des individus : en fonction des peintre")
# calculate acp64nn
out_acp64nn <- PCA(painting64,scale.unit=FALSE,ncp=63,quali.sup=64,graph=FALSE)
# draw the Eboulis
val_prop <- out_acp64nn$eig[,"eigenvalue"]
val_prop_cum <- cumsum(val_prop)/sum(val_prop)
cp <- 1:length(val_prop)
vp <- data.frame(cp=cp,val_prop=val_prop)
vp_cum <- data.frame(cp=cp,val_prop_cum=val_prop_cum)
ggplot(data=vp,aes(x=cp,y=val_prop))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Eboulis des valeurs propres")+
xlab("Nombre de composantes principales")+
ylab("Valeurs propres")+
scale_x_continuous(breaks=cp)
ggplot(data=vp_cum,aes(x=cp,y=val_prop_cum))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Part d'inertie expliquée en fonction du nombre de CP")+
xlab("Nombre de composantes principales")+
ylab("Part d'inertie expliquée")+
scale_x_continuous(breaks=cp)
# draw the Projections des individus en fonction des peintre
plot.PCA(out_acp64nn,shadow=TRUE,cex=2,axes=c(1,2),choix="ind",habillage=64,label="none",new.plot=TRUE,
title="Projection des individus : en fonction des peintre")
View(v)
library(cluster)
cah_single <- agnes(painting8[,1:7],metric="euclidean",stand=TRUE,method="single")
plot(as.dendrogram(cah_single),main="Single linkage")
ei <- data.frame(k=2:dim(painting8)[1],height=sort(cah_ward$height,decreasing=TRUE))
ggplot(data=ei,aes(x=k,y=height))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Gain d'inertie inter-classes lors du passage de (k-1) à k classes")+
xlab("k")+
ylab("Indice d'aggrégation")+
scale_x_continuous(breaks=2:dim(painting8)[1])
plot(as.dendrogram(cah_ward),main="Ward")
rect.hclust(cah_ward,k=3)
cluster_ward_3cl <- data.frame(nom=rownames(voitures),classe=cutree(cah_ward,k=3))
cluster_ward_3cl[order(cluster_ward_3cl$classe),]
cah_ward <- agnes(painting8[,1:7],metric="euclidean",stand=TRUE,method="ward")
plot(as.dendrogram(cah_ward),main="Ward")
ei <- data.frame(k=2:dim(painting8)[1],height=sort(cah_ward$height,decreasing=TRUE))
ggplot(data=ei,aes(x=k,y=height))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Gain d'inertie inter-classes lors du passage de (k-1) à k classes")+
xlab("k")+
ylab("Indice d'aggrégation")+
scale_x_continuous(breaks=2:dim(painting8)[1])
plot(as.dendrogram(cah_ward),main="Ward")
rect.hclust(cah_ward,k=3)
cluster_ward_3cl <- data.frame(nom=rownames(voitures),classe=cutree(cah_ward,k=3))
cluster_ward_3cl[order(cluster_ward_3cl$classe),]
cah_ward <- agnes(painting8[,1:7],metric="euclidean",stand=TRUE,method="ward")
plot(as.dendrogram(cah_ward),main="Ward")
ei <- data.frame(k=2:dim(painting8)[1],height=sort(cah_ward$height,decreasing=TRUE))
ggplot(data=ei,aes(x=k,y=height))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Gain d'inertie inter-classes lors du passage de (k-1) à k classes")+
xlab("k")+
ylab("Indice d'aggrégation")+
scale_x_continuous(breaks=2:dim(painting8)[1])
plot(as.dendrogram(cah_ward),main="Ward")
rect.hclust(cah_ward,k=3)
cluster_ward_3cl <- data.frame(nom=rownames(painting8),classe=cutree(cah_ward,k=3))
cluster_ward_3cl[order(cluster_ward_3cl$classe),]
cah_ward <- agnes(painting8[,1:7],metric="euclidean",stand=TRUE,method="ward")
ei <- data.frame(k=2:dim(painting8)[1],height=sort(cah_ward$height,decreasing=TRUE))
ggplot(data=ei,aes(x=k,y=height))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Gain d'inertie inter-classes lors du passage de (k-1) à k classes")+
xlab("k")+
ylab("Indice d'aggrégation")+
scale_x_continuous(breaks=2:dim(painting8)[1])
plot(as.dendrogram(cah_ward),main="Ward")
rect.hclust(cah_ward,k=2)
cluster_ward_3cl <- data.frame(nom=rownames(painting8),classe=cutree(cah_ward,k=2))
cluster_ward_3cl[order(cluster_ward_3cl$classe),]
library(ggplot2)
library(FactoMineR)
library(cluster)
library(corrplot)
cah_ward <- agnes(painting8[,1:7],metric="euclidean",stand=TRUE,method="ward")
ei <- data.frame(k=2:dim(painting8)[1],height=sort(cah_ward$height,decreasing=TRUE))
ggplot(data=ei,aes(x=k,y=height))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Gain d'inertie inter-classes lors du passage de (k-1) à k classes")+
xlab("k")+
ylab("Indice d'aggrégation")+
scale_x_continuous(breaks=2:dim(painting8)[1])
plot(as.dendrogram(cah_ward),main="Ward")
rect.hclust(cah_ward,k=2)
cluster_ward_3cl <- data.frame(nom=rownames(painting8),classe=cutree(cah_ward,k=2))
cluster_ward_3cl[order(cluster_ward_3cl$classe),]
setwd("F:\\R\\TP1\\")
# read the data
painting8 <- read.table("painting8.txt",sep=";",dec=".")
# repeat R 40 times, repeat VG 44 times and combine them
painting8$peintre <- as.factor(c(rep("R",40),rep("VG",44)))
painting64 <- read.table("painting64.txt",sep=";",dec=".")
painting64$peintre <- as.factor(c(rep("R",40),rep("VG",44)))
cah_ward <- agnes(painting8[,1:7],metric="euclidean",stand=TRUE,method="ward")
ei <- data.frame(k=2:dim(painting8)[1],height=sort(cah_ward$height,decreasing=TRUE))
ggplot(data=ei,aes(x=k,y=height))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Gain d'inertie inter-classes lors du passage de (k-1) à k classes")+
xlab("k")+
ylab("Indice d'aggrégation")+
scale_x_continuous(breaks=2:dim(painting8)[1])
plot(as.dendrogram(cah_ward),main="Ward")
rect.hclust(cah_ward,k=2)
cluster_ward_3cl <- data.frame(nom=rownames(painting8),classe=cutree(cah_ward,k=2))
cluster_ward_3cl[order(cluster_ward_3cl$classe),]
library(ggplot2)
library(FactoMineR)
library(cluster)
library(corrplot)
setwd("F:\\R\\TP1\\")
# read the data
painting8 <- read.table("painting8.txt",sep=";",dec=".")
# repeat R 40 times, repeat VG 44 times and combine them
painting8$peintre <- as.factor(c(rep("R",40),rep("VG",44)))
painting64 <- read.table("painting64.txt",sep=";",dec=".")
painting64$peintre <- as.factor(c(rep("R",40),rep("VG",44)))
# calculate the variance of p8
v <- var(painting8[,1:7])
# draw the Boîtes à moustaches of p8
boxplot(painting8[,1:7],main="Boîtes à moustaches")
# draw the Nuages des points of p8
plot(painting8[,1:7],main="Nuages des points")
# calculate the covariance of p8
c <- cor(painting8[,1:7])
corrplot(c, method = "number", col = "black", cl.pos = "n")
# calculate acp8n
out_acp8n <- PCA(painting8,scale.unit=TRUE,ncp=7,quali.sup=8,graph=FALSE)
# draw the Eboulis
val_prop <- out_acp8n$eig[,"eigenvalue"]
val_prop_cum <- cumsum(val_prop)/sum(val_prop)
cp <- 1:length(val_prop)
vp <- data.frame(cp=cp,val_prop=val_prop)
vp_cum <- data.frame(cp=cp,val_prop_cum=val_prop_cum)
ggplot(data=vp,aes(x=cp,y=val_prop))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Eboulis des valeurs propres")+
xlab("Nombre de composantes principales")+
ylab("Valeurs propres")+
scale_x_continuous(breaks=cp)
ggplot(data=vp_cum,aes(x=cp,y=val_prop_cum))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Part d'inertie expliquée en fonction du nombre de CP")+
xlab("Nombre de composantes principales")+
ylab("Part d'inertie expliquée")+
scale_x_continuous(breaks=cp)
# draw the Cercle des corrélations
plot.PCA(out_acp8n,shadow=TRUE,cex=0.8,axes=c(1,2),choix="var",new.plot=TRUE,
title="Cercle des corrélations")
# draw the Projections des individus en fonction des peintre
plot.PCA(out_acp8n,shadow=TRUE,cex=2,axes=c(1,2),choix="ind",habillage=8,label="none",new.plot=TRUE,
title="Projection des individus : en fonction des peintre")
# calculate acp8nn
out_acp8nn <- PCA(painting8,scale.unit=FALSE,ncp=7,quali.sup=8,graph=FALSE)
# draw the Eboulis
val_prop <- out_acp8nn$eig[,"eigenvalue"]
val_prop_cum <- cumsum(val_prop)/sum(val_prop)
cp <- 1:length(val_prop)
vp <- data.frame(cp=cp,val_prop=val_prop)
vp_cum <- data.frame(cp=cp,val_prop_cum=val_prop_cum)
ggplot(data=vp,aes(x=cp,y=val_prop))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Eboulis des valeurs propres")+
xlab("Nombre de composantes principales")+
ylab("Valeurs propres")+
scale_x_continuous(breaks=cp)
ggplot(data=vp_cum,aes(x=cp,y=val_prop_cum))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Part d'inertie expliquée en fonction du nombre de CP")+
xlab("Nombre de composantes principales")+
ylab("Part d'inertie expliquée")+
scale_x_continuous(breaks=cp)
# draw the Projections des individus en fonction des peintre
plot.PCA(out_acp8nn,shadow=TRUE,cex=2,axes=c(1,2),choix="ind",habillage=8,label="none",new.plot=TRUE,
title="Projection des individus : en fonction des peintre")
# calculate acp64nn
out_acp64nn <- PCA(painting64,scale.unit=FALSE,ncp=63,quali.sup=64,graph=FALSE)
# draw the Eboulis
val_prop <- out_acp64nn$eig[,"eigenvalue"]
val_prop_cum <- cumsum(val_prop)/sum(val_prop)
cp <- 1:length(val_prop)
vp <- data.frame(cp=cp,val_prop=val_prop)
vp_cum <- data.frame(cp=cp,val_prop_cum=val_prop_cum)
ggplot(data=vp,aes(x=cp,y=val_prop))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Eboulis des valeurs propres")+
xlab("Nombre de composantes principales")+
ylab("Valeurs propres")+
scale_x_continuous(breaks=cp)
ggplot(data=vp_cum,aes(x=cp,y=val_prop_cum))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Part d'inertie expliquée en fonction du nombre de CP")+
xlab("Nombre de composantes principales")+
ylab("Part d'inertie expliquée")+
scale_x_continuous(breaks=cp)
# draw the Projections des individus en fonction des peintre
plot.PCA(out_acp64nn,shadow=TRUE,cex=2,axes=c(1,2),choix="ind",habillage=64,label="none",new.plot=TRUE,
title="Projection des individus : en fonction des peintre")
cah_ward <- agnes(painting8[,1:7],metric="euclidean",stand=TRUE,method="ward")
ei <- data.frame(k=2:dim(painting8)[1],height=sort(cah_ward$height,decreasing=TRUE))
ggplot(data=ei,aes(x=k,y=height))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Gain d'inertie inter-classes lors du passage de (k-1) à k classes")+
xlab("k")+
ylab("Indice d'aggrégation")+
scale_x_continuous(breaks=2:dim(painting8)[1])
plot(as.dendrogram(cah_ward),main="Ward")
rect.hclust(cah_ward,k=2)
cluster_ward_3cl <- data.frame(nom=rownames(painting8),classe=cutree(cah_ward,k=2))
cluster_ward_3cl[order(cluster_ward_3cl$classe),]
cah_ward <- agnes(painting8[,1:7],metric="euclidean",stand=TRUE,method="ward")
plot(as.dendrogram(cah_ward),main="Ward")
plot(as.dendrogram(cah_ward),main="Ward")
rect.hclust(cah_ward,k=8)
cluster_ward_3cl <- data.frame(nom=rownames(painting8),classe=cutree(cah_ward,k=8))
cluster_ward_3cl[order(cluster_ward_3cl$classe),]
plot(as.dendrogram(cah_ward),main="Ward")
rect.hclust(cah_ward,k=3)
cluster_ward_3cl <- data.frame(nom=rownames(painting8),classe=cutree(cah_ward,k=3))
cluster_ward_3cl[order(cluster_ward_3cl$classe),]
plot(as.dendrogram(cah_ward),main="Ward")
rect.hclust(cah_ward,k=4)
cluster_ward_3cl <- data.frame(nom=rownames(painting8),classe=cutree(cah_ward,k=4))
cluster_ward_3cl[order(cluster_ward_3cl$classe),]
painting8_nor <- scale(paniting8[,1:7],center=TRUE,scale=TRUE)
cluster_kmeans_3cl <- kmeans(painting8_nor,centers=3,nstart=20)
print(cluster_kmeans_3cl)
View(painting8)
library(ggplot2)
library(FactoMineR)
library(cluster)
library(corrplot)
setwd("F:\\R\\TP1\\")
# read the data
painting8 <- read.table("painting8.txt",sep=";",dec=".")
# repeat R 40 times, repeat VG 44 times and combine them
painting8$peintre <- as.factor(c(rep("R",40),rep("VG",44)))
painting64 <- read.table("painting64.txt",sep=";",dec=".")
painting64$peintre <- as.factor(c(rep("R",40),rep("VG",44)))
painting8_nor <- scale(paniting8[,1:7],center=TRUE,scale=TRUE)
cluster_kmeans_3cl <- kmeans(painting8_nor,centers=3,nstart=20)
print(cluster_kmeans_3cl)
painting8_nor <- scale(painting8[,1:7],center=TRUE,scale=TRUE)
cluster_kmeans_3cl <- kmeans(painting8_nor,centers=3,nstart=20)
print(cluster_kmeans_3cl)
painting8_nor <- scale(painting8[,1:7],center=TRUE,scale=TRUE)
cluster_kmeans_3cl <- kmeans(painting8_nor,centers=2,nstart=20)
print(cluster_kmeans_3cl)
table(cluster_ward_3cl$classe,cluster_kmeans_3cl$cluster)
source("F:/R/TP1/TP1.R")
source("F:/R/TP1/TP1.R")
source("F:/R/TP1/TP1.R")
source("F:/R/TP1/TP1.R", encoding = 'UTF-8')
source("F:/R/TP1/TP1.R")
source("F:/R/TP1/TP1.R")
ggplot(data=vp,aes(x=cp,y=val_prop))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Eboulis des valeurs propres")+
xlab("Nombre de composantes principales")+
ylab("Valeurs propres")+
scale_x_continuous(breaks=cp)
ggplot(data=vp_cum,aes(x=cp,y=val_prop_cum))+
geom_bar(stat="identity",fill="steelblue")+
theme_minimal()+
ggtitle("Part d'inertie expliquée en fonction du nombre de CP")+
xlab("Nombre de composantes principales")+
ylab("Part d'inertie expliquée")+
scale_x_continuous(breaks=cp)
source("F:/R/TP1/TP1.R")
